<!DOCTYPE html>
<html lang="es">

<head>
    <!-- Include head partial -->
    <%- include('../partials/head'); %>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
            overflow-x: hidden;
        }

        .container {
            text-align: center;
            max-width: 800px;
            padding: 20px;
            position: relative;
        }

        .main-title {
            font-size: 4rem;
            font-weight: 700;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { text-shadow: 2px 2px 4px rgba(0,0,0,0.3), 0 0 20px rgba(255,255,255,0.2); }
            to { text-shadow: 2px 2px 4px rgba(0,0,0,0.3), 0 0 30px rgba(255,255,255,0.4); }
        }

        .subtitle {
            font-size: 1.5rem;
            margin-bottom: 40px;
            opacity: 0.9;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 40px 0;
        }

        .feature-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 30px 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .feature-card:hover {
            transform: translateY(-10px);
            background: rgba(255, 255, 255, 0.2);
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
        }

        .feature-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            color: #FFD700;
        }

        .feature-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .feature-desc {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .action-buttons {
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
            margin: 40px 0;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 10px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #FF6B6B, #FF8E53);
            color: white;
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }

        .coffee-button {
            margin: 30px 0;
            transition: transform 0.3s ease;
        }

        .coffee-button:hover {
            transform: scale(1.05);
        }

        #audioPlayer {
            width: 100%;
            max-width: 400px;
            margin: 20px auto;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .status-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .status-dot {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
            animation: pulse 2s infinite;
        }

        .status-online { background-color: #4CAF50; }
        .status-offline { background-color: #f44336; }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .floating-elements {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            overflow: hidden;
        }

        .floating-element {
            position: absolute;
            font-size: 2rem;
            opacity: 0.1;
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }

        @media (max-width: 768px) {
            .main-title { font-size: 2.5rem; }
            .subtitle { font-size: 1.2rem; }
            .features-grid { grid-template-columns: 1fr; }
            .action-buttons { flex-direction: column; align-items: center; }
        }
    </style>
</head>

<body>
    <!-- Status Indicator -->
    <div class="status-indicator" id="status-indicator">
        <span class="status-dot status-offline" id="status-dot"></span>
        <span id="status-text">Conectando...</span>
    </div>

    <!-- Floating Elements -->
    <div class="floating-elements">
        <div class="floating-element" style="top: 10%; left: 10%;">ðŸ¤–</div>
        <div class="floating-element" style="top: 20%; right: 15%; animation-delay: -2s;">ðŸ’¬</div>
        <div class="floating-element" style="bottom: 30%; left: 20%; animation-delay: -4s;">ðŸŽ®</div>
        <div class="floating-element" style="top: 60%; right: 10%; animation-delay: -1s;">âš¡</div>
        <div class="floating-element" style="bottom: 20%; right: 25%; animation-delay: -3s;">ðŸš€</div>
    </div>

    <div class="container">
        <header>
            <!-- Include header partial -->
            <%- include('../partials/header'); %>
        </header>

        <h1 class="main-title">ðŸ¤– AlimentaciÃ³n Chino Bot</h1>
        <p class="subtitle">Tu asistente inteligente de Twitch con IA</p>

        <div class="features-grid">
            <div class="feature-card" onclick="window.open('/dashboard', '_blank')">
                <div class="feature-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="feature-title">Dashboard en Vivo</div>
                <div class="feature-desc">Monitorea el estado del bot en tiempo real</div>
            </div>

            <div class="feature-card" onclick="testBot()">
                <div class="feature-icon">
                    <i class="fas fa-comments"></i>
                </div>
                <div class="feature-title">Prueba la IA</div>
                <div class="feature-desc">InteractÃºa directamente con el bot</div>
            </div>

            <div class="feature-card" onclick="window.open('/health', '_blank')">
                <div class="feature-icon">
                    <i class="fas fa-heartbeat"></i>
                </div>
                <div class="feature-title">Health Check</div>
                <div class="feature-desc">Verifica el estado del sistema</div>
            </div>

            <div class="feature-card" onclick="window.open('/metrics', '_blank')">
                <div class="feature-icon">
                    <i class="fas fa-tachometer-alt"></i>
                </div>
                <div class="feature-title">MÃ©tricas</div>
                <div class="feature-desc">EstadÃ­sticas detalladas del bot</div>
            </div>
        </div>

        <div class="action-buttons">
            <a href="/dashboard" class="btn btn-primary">
                <i class="fas fa-rocket"></i>
                Ver Dashboard
            </a>
            <button class="btn btn-secondary" onclick="clearCache()">
                <i class="fas fa-broom"></i>
                Limpiar Cache
            </button>
        </div>

        <a href="https://www.buymeacoffee.com/osetinhas" class="coffee-button">
            <img src="https://img.buymeacoffee.com/button-api/?text=Help me with a coffee :)&emoji=&slug=osetinhas&button_colour=BD5FFF&font_colour=ffffff&font_family=Poppins&outline_colour=000000&coffee_colour=FFDD00" alt="Buy me a coffee button" />
        </a>

        <!-- Audio player with controls -->
        <audio controls id="audioPlayer">
            <source id="audioSource" src="/public/file.mp3" type="audio/mpeg">
            Your browser does not support the audio tag.
        </audio>

        <footer>
            <!-- Include footer partial -->
            <%- include('../partials/footer'); %>
        </footer>
    </div>

    <script>
        // Check bot status
        async function checkBotStatus() {
            try {
                const response = await fetch('/api/stats');
                const data = await response.json();
                
                const statusDot = document.getElementById('status-dot');
                const statusText = document.getElementById('status-text');
                
                if (data.bot.connected) {
                    statusDot.className = 'status-dot status-online';
                    statusText.textContent = 'Bot Online';
                } else {
                    statusDot.className = 'status-dot status-offline';
                    statusText.textContent = 'Bot Offline';
                }
            } catch (error) {
                console.error('Error checking bot status:', error);
                document.getElementById('status-dot').className = 'status-dot status-offline';
                document.getElementById('status-text').textContent = 'Error de conexiÃ³n';
            }
        }

        // Test bot function
        async function testBot() {
            const message = prompt('Â¿QuÃ© quieres preguntarle al bot?', 'Hola, Â¿cÃ³mo estÃ¡s?');
            if (!message) return;

            try {
                const response = await fetch(`/gpt/${encodeURIComponent(message)}`);
                const botResponse = await response.text();
                
                alert(`Bot responde: ${botResponse}`);
            } catch (error) {
                alert('Error al comunicarse con el bot. IntÃ©ntalo mÃ¡s tarde.');
                console.error('Error testing bot:', error);
            }
        }

        // Clear cache function
        async function clearCache() {
            if (!confirm('Â¿EstÃ¡s seguro de que quieres limpiar el cache?')) return;

            try {
                const response = await fetch('/clear-cache', { method: 'POST' });
                const result = await response.json();
                
                alert('Cache limpiado exitosamente!');
                console.log(result);
            } catch (error) {
                alert('Error al limpiar el cache.');
                console.error('Error clearing cache:', error);
            }
        }

        // Function to check for updates using WebSocket
        function checkForUpdates() {
            try {
                // Create a WebSocket connection
                const socket = new WebSocket('wss://' + window.location.host + '/check-for-updates');

                // Handle messages from the server
                socket.addEventListener('message', (event) => {
                    const data = JSON.parse(event.data);

                    // Check if the file is updated
                    if (data.updated) {
                        // Reload the audio source with a new timestamp to avoid caching
                        const audioElement = document.getElementById('audioPlayer');
                        const audioSource = document.getElementById('audioSource');

                        if (audioElement && audioSource) {
                            audioSource.src = '/public/file.mp3?' + new Date().getTime();
                        }

                        // Load and play the updated audio
                        audioElement.load();
                        audioElement.play();
                    }
                });

                // Handle WebSocket errors
                socket.addEventListener('error', (error) => {
                    console.error('WebSocket error:', error);
                });
            } catch (error) {
                console.log('WebSocket not available, skipping audio updates');
            }
        }

        // Initialize everything when DOM is loaded
        document.addEventListener("DOMContentLoaded", function() {
            checkBotStatus();
            checkForUpdates();
            
            // Check bot status every 30 seconds
            setInterval(checkBotStatus, 30000);
        });

        // Add some fun interactions
        document.addEventListener('mousemove', function(e) {
            const floatingElements = document.querySelectorAll('.floating-element');
            floatingElements.forEach((element, index) => {
                const speed = (index + 1) * 0.0001;
                const x = (e.clientX * speed) % 10;
                const y = (e.clientY * speed) % 10;
                element.style.transform += ` translate(${x}px, ${y}px)`;
            });
        });
    </script>

</body>

</html>
