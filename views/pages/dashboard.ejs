<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ðŸ¤– Bot Dashboard - AlimentaciÃ³n Chino</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0,0,0,0.15);
        }

        .stat-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .stat-icon {
            font-size: 2rem;
            margin-right: 15px;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 10px;
        }

        .bot-status .stat-icon { background: linear-gradient(45deg, #4CAF50, #45a049); color: white; }
        .system-info .stat-icon { background: linear-gradient(45deg, #2196F3, #1976D2); color: white; }
        .cache-info .stat-icon { background: linear-gradient(45deg, #FF9800, #F57C00); color: white; }
        .activity .stat-icon { background: linear-gradient(45deg, #9C27B0, #7B1FA2); color: white; }

        .stat-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #333;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            margin: 10px 0;
        }

        .stat-detail {
            font-size: 0.9rem;
            color: #666;
            margin: 5px 0;
        }

        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-healthy { background-color: #4CAF50; }
        .status-unhealthy { background-color: #f44336; }
        .status-warning { background-color: #ff9800; }

        .progress-bar {
            width: 100%;
            height: 8px;
            background-color: #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #45a049);
            transition: width 0.3s ease;
        }

        .channels-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }

        .channel-tag {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .refresh-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }

        .refresh-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 25px rgba(0,0,0,0.3);
        }

        .refresh-btn.spinning {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .last-update {
            text-align: center;
            color: rgba(255,255,255,0.8);
            margin-top: 20px;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .header h1 { font-size: 2rem; }
            .stats-grid { grid-template-columns: 1fr; }
            .container { padding: 10px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ¤– Bot Dashboard</h1>
            <p>Monitor en tiempo real del bot de Twitch</p>
        </div>

        <div class="stats-grid">
            <div class="stat-card bot-status">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="stat-title">Estado del Bot</div>
                </div>
                <div class="stat-value" id="bot-status">
                    <span class="status-indicator" id="status-dot"></span>
                    <span id="status-text">Cargando...</span>
                </div>
                <div class="stat-detail" id="bot-uptime">Uptime: --</div>
                <div class="stat-detail">Canales conectados:</div>
                <div class="channels-list" id="channels-list"></div>
            </div>

            <div class="stat-card system-info">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="fas fa-server"></i>
                    </div>
                    <div class="stat-title">Sistema</div>
                </div>
                <div class="stat-value" id="memory-usage">-- MB</div>
                <div class="stat-detail">Uso de memoria</div>
                <div class="progress-bar">
                    <div class="progress-fill" id="memory-progress"></div>
                </div>
                <div class="stat-detail" id="system-uptime">Uptime del sistema: --</div>
            </div>

            <div class="stat-card cache-info">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="fas fa-database"></i>
                    </div>
                    <div class="stat-title">Cache</div>
                </div>
                <div class="stat-value" id="cache-total">--</div>
                <div class="stat-detail" id="api-cache">Cache API: --</div>
                <div class="stat-detail" id="bot-cache">Cache Bot: --</div>
            </div>

            <div class="stat-card activity">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="stat-title">Actividad</div>
                </div>
                <div class="stat-value" id="total-messages">--</div>
                <div class="stat-detail">Mensajes procesados</div>
                <div class="stat-detail" id="responses-sent">Respuestas enviadas: --</div>
                <div class="stat-detail" id="avg-response-time">Tiempo promedio: --ms</div>
            </div>
        </div>

        <div class="last-update" id="last-update">
            Ãšltima actualizaciÃ³n: --
        </div>
    </div>

    <button class="refresh-btn" id="refresh-btn" onclick="fetchStats()">
        <i class="fas fa-sync-alt"></i>
    </button>

    <script>
        let isRefreshing = false;

        function formatUptime(seconds) {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);
            
            if (days > 0) return `${days}d ${hours}h ${minutes}m`;
            if (hours > 0) return `${hours}h ${minutes}m ${secs}s`;
            if (minutes > 0) return `${minutes}m ${secs}s`;
            return `${secs}s`;
        }

        async function fetchStats() {
            if (isRefreshing) return;
            
            isRefreshing = true;
            const refreshBtn = document.getElementById('refresh-btn');
            refreshBtn.classList.add('spinning');

            try {
                const response = await fetch('/api/stats');
                const data = await response.json();

                // Bot status
                const statusDot = document.getElementById('status-dot');
                const statusText = document.getElementById('status-text');
                
                if (data.bot.connected) {
                    statusDot.className = 'status-indicator status-healthy';
                    statusText.textContent = 'Conectado';
                } else {
                    statusDot.className = 'status-indicator status-unhealthy';
                    statusText.textContent = 'Desconectado';
                }

                document.getElementById('bot-uptime').textContent = `Uptime: ${formatUptime(data.system.uptime)}`;

                // Channels
                const channelsList = document.getElementById('channels-list');
                channelsList.innerHTML = '';
                if (data.bot.channels && data.bot.channels.length > 0) {
                    data.bot.channels.forEach(channel => {
                        const tag = document.createElement('span');
                        tag.className = 'channel-tag';
                        tag.textContent = channel;
                        channelsList.appendChild(tag);
                    });
                } else {
                    channelsList.innerHTML = '<span class="stat-detail">NingÃºn canal conectado</span>';
                }

                // Memory
                document.getElementById('memory-usage').textContent = `${data.system.memory} MB`;
                const memoryPercent = Math.min((data.system.memory / 100) * 100, 100);
                document.getElementById('memory-progress').style.width = `${memoryPercent}%`;
                document.getElementById('system-uptime').textContent = `Uptime del sistema: ${formatUptime(data.system.uptime)}`;

                // Cache
                const totalCache = data.system.cache.api + data.system.cache.bot;
                document.getElementById('cache-total').textContent = totalCache;
                document.getElementById('api-cache').textContent = `Cache API: ${data.system.cache.api}`;
                document.getElementById('bot-cache').textContent = `Cache Bot: ${data.system.cache.bot}`;

                // Activity (from bot metrics if available)
                if (data.bot.metrics) {
                    document.getElementById('total-messages').textContent = data.bot.metrics.totalMessages || 0;
                    document.getElementById('responses-sent').textContent = `Respuestas enviadas: ${data.bot.metrics.responsesSent || 0}`;
                    document.getElementById('avg-response-time').textContent = `Tiempo promedio: ${data.bot.metrics.avgResponseTime || 0}ms`;
                } else {
                    document.getElementById('total-messages').textContent = '0';
                    document.getElementById('responses-sent').textContent = 'Respuestas enviadas: 0';
                    document.getElementById('avg-response-time').textContent = 'Tiempo promedio: --ms';
                }

                // Last update
                document.getElementById('last-update').textContent = `Ãšltima actualizaciÃ³n: ${new Date().toLocaleTimeString()}`;

            } catch (error) {
                console.error('Error fetching stats:', error);
                document.getElementById('status-text').textContent = 'Error de conexiÃ³n';
                document.getElementById('status-dot').className = 'status-indicator status-unhealthy';
            } finally {
                isRefreshing = false;
                refreshBtn.classList.remove('spinning');
            }
        }

        // Auto refresh every 5 seconds
        setInterval(fetchStats, 5000);

        // Initial load
        document.addEventListener('DOMContentLoaded', fetchStats);
    </script>
</body>
</html>