<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ðŸ“Š MÃ©tricas del Bot</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
            min-height: 100vh;
            color: #333;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .metric-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            transition: transform 0.3s ease;
        }

        .metric-card:hover {
            transform: translateY(-5px);
        }

        .metric-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .metric-icon {
            font-size: 2.5rem;
            margin-right: 15px;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 15px;
            color: white;
        }

        .bot-metrics .metric-icon { background: linear-gradient(45deg, #4CAF50, #45a049); }
        .server-metrics .metric-icon { background: linear-gradient(45deg, #FF9800, #F57C00); }
        .cache-metrics .metric-icon { background: linear-gradient(45deg, #9C27B0, #7B1FA2); }

        .metric-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: #333;
        }

        .metric-value {
            font-size: 2.5rem;
            font-weight: 700;
            margin: 15px 0;
            color: #2196F3;
        }

        .metric-detail {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 10px 0;
            padding: 10px 0;
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }

        .metric-detail:last-child {
            border-bottom: none;
        }

        .metric-label {
            font-size: 0.9rem;
            color: #666;
            font-weight: 500;
        }

        .metric-data {
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
        }

        .progress-bar {
            width: 100%;
            height: 10px;
            background-color: #e0e0e0;
            border-radius: 5px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #2196F3, #1976D2);
            transition: width 0.3s ease;
        }

        .cache-hit-rate {
            display: inline-block;
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 600;
        }

        .refresh-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            background: linear-gradient(45deg, #2196F3, #1976D2);
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }

        .refresh-btn:hover {
            transform: scale(1.1);
        }

        .refresh-btn.spinning {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .timestamp {
            text-align: center;
            color: rgba(255,255,255,0.8);
            margin-top: 20px;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .header h1 { font-size: 2rem; }
            .metrics-grid { grid-template-columns: 1fr; }
            .container { padding: 10px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ“Š MÃ©tricas del Bot</h1>
            <p>EstadÃ­sticas detalladas del rendimiento</p>
        </div>

        <div class="metrics-grid">
            <div class="metric-card bot-metrics">
                <div class="metric-header">
                    <div class="metric-icon">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="metric-title">Bot Performance</div>
                </div>
                <div class="metric-value" id="processed-messages">--</div>
                <div class="metric-detail">
                    <span class="metric-label">Mensajes Procesados</span>
                    <span class="metric-data" id="processed-count">--</span>
                </div>
                <div class="metric-detail">
                    <span class="metric-label">Errores</span>
                    <span class="metric-data" id="error-count">--</span>
                </div>
                <div class="metric-detail">
                    <span class="metric-label">Cache Hit Rate</span>
                    <span class="cache-hit-rate" id="cache-hit-rate">--%</span>
                </div>
                <div class="metric-detail">
                    <span class="metric-label">Suscriptores</span>
                    <span class="metric-data" id="subscribers">--</span>
                </div>
                <div class="metric-detail">
                    <span class="metric-label">Moderadores</span>
                    <span class="metric-data" id="moderators">--</span>
                </div>
            </div>

            <div class="metric-card server-metrics">
                <div class="metric-header">
                    <div class="metric-icon">
                        <i class="fas fa-server"></i>
                    </div>
                    <div class="metric-title">Sistema</div>
                </div>
                <div class="metric-value" id="server-uptime">--</div>
                <div class="metric-detail">
                    <span class="metric-label">Uptime del Servidor</span>
                    <span class="metric-data" id="uptime-text">--</span>
                </div>
                <div class="metric-detail">
                    <span class="metric-label">Uso de Memoria</span>
                    <span class="metric-data" id="memory-usage">-- MB</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" id="memory-progress"></div>
                </div>
            </div>

            <div class="metric-card cache-metrics">
                <div class="metric-header">
                    <div class="metric-icon">
                        <i class="fas fa-database"></i>
                    </div>
                    <div class="metric-title">Cache</div>
                </div>
                <div class="metric-value" id="total-cache">--</div>
                <div class="metric-detail">
                    <span class="metric-label">Total Items en Cache</span>
                    <span class="metric-data" id="total-cache-items">--</span>
                </div>
                <div class="metric-detail">
                    <span class="metric-label">Cache API</span>
                    <span class="metric-data" id="api-cache">--</span>
                </div>
                <div class="metric-detail">
                    <span class="metric-label">Cache Bot</span>
                    <span class="metric-data" id="bot-cache">--</span>
                </div>
            </div>
        </div>

        <div class="timestamp" id="timestamp">
            Ãšltima actualizaciÃ³n: --
        </div>
    </div>

    <button class="refresh-btn" id="refresh-btn" onclick="fetchMetrics()">
        <i class="fas fa-sync-alt"></i>
    </button>

    <script>
        let isRefreshing = false;

        function formatUptime(seconds) {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);
            
            if (days > 0) return `${days}d ${hours}h ${minutes}m`;
            if (hours > 0) return `${hours}h ${minutes}m ${secs}s`;
            if (minutes > 0) return `${minutes}m ${secs}s`;
            return `${secs}s`;
        }

        async function fetchMetrics() {
            if (isRefreshing) return;
            
            isRefreshing = true;
            const refreshBtn = document.getElementById('refresh-btn');
            refreshBtn.classList.add('spinning');

            try {
                const response = await fetch('/api/metrics');
                const data = await response.json();

                // Bot metrics
                document.getElementById('processed-messages').textContent = data.bot.processed;
                document.getElementById('processed-count').textContent = data.bot.processed;
                document.getElementById('error-count').textContent = data.bot.errors;
                document.getElementById('cache-hit-rate').textContent = data.bot.cacheHitRate;
                document.getElementById('subscribers').textContent = data.bot.subscribers;
                document.getElementById('moderators').textContent = data.bot.moderators;

                // Server metrics
                const uptimeSeconds = data.server.uptime;
                document.getElementById('server-uptime').textContent = formatUptime(uptimeSeconds);
                document.getElementById('uptime-text').textContent = formatUptime(uptimeSeconds);
                
                const memoryMB = parseInt(data.server.memory.replace('MB', ''));
                document.getElementById('memory-usage').textContent = data.server.memory;
                
                // Memory progress bar (assuming 100MB as max for visualization)
                const memoryPercent = Math.min((memoryMB / 100) * 100, 100);
                document.getElementById('memory-progress').style.width = `${memoryPercent}%`;

                // Cache metrics
                const totalCache = data.cache.api + data.cache.bot;
                document.getElementById('total-cache').textContent = totalCache;
                document.getElementById('total-cache-items').textContent = totalCache;
                document.getElementById('api-cache').textContent = data.cache.api;
                document.getElementById('bot-cache').textContent = data.cache.bot;

                // Update timestamp
                document.getElementById('timestamp').textContent = `Ãšltima actualizaciÃ³n: ${new Date().toLocaleTimeString()}`;

            } catch (error) {
                console.error('Error fetching metrics:', error);
                // Show error state
                document.getElementById('processed-messages').textContent = 'Error';
            } finally {
                isRefreshing = false;
                refreshBtn.classList.remove('spinning');
            }
        }

        // Auto refresh every 5 seconds
        setInterval(fetchMetrics, 5000);

        // Initial load
        document.addEventListener('DOMContentLoaded', fetchMetrics);
    </script>
</body>
</html>