<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🏥 Health Check - Bot Status</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            min-height: 100vh;
            color: #333;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .status-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 30px;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 30px;
        }

        .status-icon {
            font-size: 4rem;
            margin-right: 20px;
        }

        .status-healthy {
            color: #4CAF50;
        }

        .status-unhealthy {
            color: #f44336;
        }

        .status-text {
            font-size: 2.5rem;
            font-weight: 700;
        }

        .details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .detail-item {
            background: rgba(0, 0, 0, 0.05);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
        }

        .detail-label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .detail-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
        }

        .channels-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            justify-content: center;
            margin-top: 10px;
        }

        .channel-tag {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            padding: 6px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .refresh-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            background: linear-gradient(45deg, #4CAF50, #45a049);
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
        }

        .refresh-btn:hover {
            transform: scale(1.1);
        }

        .refresh-btn.spinning {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from {
                transform: rotate(0deg);
            }

            to {
                transform: rotate(360deg);
            }
        }

        .timestamp {
            text-align: center;
            color: rgba(255, 255, 255, 0.8);
            margin-top: 20px;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 2rem;
            }

            .status-text {
                font-size: 2rem;
            }

            .status-icon {
                font-size: 3rem;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>🏥 Health Check</h1>
            <p>Estado de salud del sistema</p>
        </div>

        <div class="status-card">
            <div class="status-indicator">
                <i class="fas fa-heartbeat status-icon" id="status-icon"></i>
                <div class="status-text" id="status-text">Cargando...</div>
            </div>

            <div class="details-grid">
                <div class="detail-item">
                    <div class="detail-label">Estado del Bot</div>
                    <div class="detail-value" id="bot-status">--</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Uptime</div>
                    <div class="detail-value" id="uptime">--</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Memoria</div>
                    <div class="detail-value" id="memory">-- MB</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Versión</div>
                    <div class="detail-value" id="version">--</div>
                </div>
            </div>

            <div class="detail-item" style="margin-top: 20px;">
                <div class="detail-label">Canales Conectados</div>
                <div class="channels-list" id="channels-list"></div>
            </div>
        </div>

        <div class="timestamp" id="timestamp">
            Última actualización: --
        </div>
    </div>

    <button class="refresh-btn" id="refresh-btn" onclick="fetchHealth()">
        <i class="fas fa-sync-alt"></i>
    </button>

    <script>
        let isRefreshing = false;

        function formatUptime(seconds) {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);

            if (days > 0) return `${days}d ${hours}h ${minutes}m`;
            if (hours > 0) return `${hours}h ${minutes}m ${secs}s`;
            if (minutes > 0) return `${minutes}m ${secs}s`;
            return `${secs}s`;
        }

        async function fetchHealth() {
            if (isRefreshing) return;

            isRefreshing = true;
            const refreshBtn = document.getElementById('refresh-btn');
            refreshBtn.classList.add('spinning');

            try {
                const response = await fetch('/api/health');
                const data = await response.json();

                // Update status
                const statusIcon = document.getElementById('status-icon');
                const statusText = document.getElementById('status-text');

                if (data.status === 'healthy') {
                    statusIcon.className = 'fas fa-heartbeat status-icon status-healthy';
                    statusText.textContent = 'Sistema Saludable';
                    statusText.style.color = '#4CAF50';
                    document.body.style.background = 'linear-gradient(135deg, #4CAF50 0%, #45a049 100%)';
                } else {
                    statusIcon.className = 'fas fa-exclamation-triangle status-icon status-unhealthy';
                    statusText.textContent = 'Sistema con Problemas';
                    statusText.style.color = '#f44336';
                    document.body.style.background = 'linear-gradient(135deg, #f44336 0%, #d32f2f 100%)';
                }

                // Update details
                document.getElementById('bot-status').textContent = data.bot.connected ? 'Conectado' : 'Desconectado';
                document.getElementById('uptime').textContent = data.uptime.human;
                document.getElementById('memory').textContent = `${data.system.memory.used} MB`;
                document.getElementById('version').textContent = data.version;

                // Update channels
                const channelsList = document.getElementById('channels-list');
                channelsList.innerHTML = '';
                if (data.bot.channels && data.bot.channels.length > 0) {
                    data.bot.channels.forEach(channel => {
                        const tag = document.createElement('span');
                        tag.className = 'channel-tag';
                        tag.textContent = channel;
                        channelsList.appendChild(tag);
                    });
                } else {
                    channelsList.innerHTML = '<span style="color: #666;">Ningún canal conectado</span>';
                }

                // Update timestamp
                document.getElementById('timestamp').textContent = `Última actualización: ${new Date().toLocaleTimeString()}`;

            } catch (error) {
                console.error('Error fetching health:', error);
                document.getElementById('status-text').textContent = 'Error de Conexión';
                document.getElementById('status-icon').className = 'fas fa-exclamation-triangle status-icon status-unhealthy';
            } finally {
                isRefreshing = false;
                refreshBtn.classList.remove('spinning');
            }
        }

        // Auto refresh every 10 seconds
        setInterval(fetchHealth, 10000);

        // Initial load
        document.addEventListener('DOMContentLoaded', fetchHealth);
    </script>
</body>

</html>